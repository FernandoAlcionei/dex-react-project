{"version":3,"sources":["containers/comic-details/components/Comic/index.js","containers/comic-details/containers/ComicDetailsView.js","containers/comic-details/containers/ComicDetailsContainer.js"],"names":["withTranslation","creators","image","comic","t","className","src","thumbnail","path","extension","alt","title","returned","items","map","item","key","name","role","description","ComicDetailsView","props","state","this","getComicDetails","id","match","params","window","scrollTo","top","behavior","clearReducer","loadingView","document","Loader","show","renderComic","Component","ComicDetailsContainer","connect","comicDetailsReducer","dispatch","sagaComicDetails"],"mappings":"8PAiDeA,G,OAAAA,eAjCD,SAAC,GAAD,IATUC,EAFCC,EAWRC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,EAAV,OACZ,yBAAKC,UAAU,mBACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,YAAYC,KAdRJ,EAc6BC,EAAMI,UAdpC,UAAcL,EAAMM,KAApB,YAA4BN,EAAMO,YAccC,IAAKP,EAAMQ,SAG/E,yBAAKN,UAAU,cACb,wBAAIA,UAAU,SACVF,EAAMQ,OAGV,yBAAKN,UAAU,aApBGJ,EAqBCE,EAAMF,WArBmBA,EAASW,SACzDX,EAASY,MAAMC,KAAI,SAACC,GAAD,OACjB,yBAAKC,IAAKD,EAAKE,KAAMZ,UAAU,WAC7B,+BAAKU,EAAKG,KAAV,MACA,kCAAQH,EAAKE,KAAb,SAGF,MAiBE,yBAAKZ,UAAU,qBACb,0BAAMA,UAAU,qBACbD,EAAE,gBAGL,uBAAGC,UAAU,eACTF,EAAMgB,oBC9BZC,G,yDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAFI,E,gEAKE,IAAD,EACaC,KAAKF,MAA5BG,EADU,EACVA,gBAAiBpB,EADP,EACOA,EACEqB,EAAWF,KAAKF,MAAnCK,MAASC,OAAUF,GAE3BG,OAAOC,SAAS,CAAEC,IAAK,EAAGC,SAAU,WAEpCP,EAAgBC,EAAIrB,K,8CAKpB4B,EADyBT,KAAKF,MAAtBW,kB,oCAIK,IAAD,EACmBT,KAAKF,MAA5BY,EADI,EACJA,YAAa9B,EADT,EACSA,MAErB,OAAK8B,GAAe9B,EAAMsB,IACxBS,SAASvB,MAAQR,EAAMQ,MAGrB,kBAAC,EAAD,CAAOR,MAAOA,KAIX,O,+BAGC,IACA8B,EAAgBV,KAAKF,MAArBY,YAER,OACE,yBAAK5B,UAAU,cACb,kBAAC8B,EAAA,EAAD,CAAQC,KAAMH,IAEZV,KAAKc,mB,GAzCgBC,cAwDhBtC,gBAAkBoB,G,QC3D3BmB,EAAwBnB,EAYfoB,uBAVS,SAAClB,GAAD,MAAY,CAClCnB,MAAOmB,EAAMmB,oBAAoBtC,MACjC8B,YAAaX,EAAMmB,oBAAoBR,gBAGd,SAACS,GAAD,MAAe,CACxCV,aAAc,kBAAMU,EAASV,gBAC7BR,gBAAiB,SAACC,EAAIrB,GAAL,OAAWsC,EAASC,YAAiBlB,EAAIrB,QAG7CoC,CAA6CD","file":"static/js/4.477773c5.chunk.js","sourcesContent":["import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport './styles.scss';\n\nconst getThumbnailUri = (image) => `${image.path}.${image.extension}`;\n\nconst renderCreators = (creators) => (creators && creators.returned ? (\n  creators.items.map((item) => (\n    <div key={item.name} className=\"creator\">\n      <b> {item.role}: </b>\n      <span> {item.name} </span>\n    </div>\n  ))\n) : null);\n\nconst Comic = ({ comic, t }) => (\n  <div className=\"comic-component\">\n    <div className=\"wrap-comic-img\">\n      <img className=\"comic-img\" src={getThumbnailUri(comic.thumbnail)} alt={comic.title} />\n    </div>\n\n    <div className=\"comic-info\">\n      <h2 className=\"title\">\n        { comic.title }\n      </h2>\n\n      <div className=\"creators\">\n        { renderCreators(comic.creators) }\n      </div>\n\n      <div className=\"wrap-descriptions\">\n        <span className=\"description-label\">\n          {t('Description')}\n        </span>\n\n        <p className=\"description\">\n          { comic.description }\n        </p>\n      </div>\n    </div>\n  </div>\n);\n\nComic.propTypes = {\n  comic: PropTypes.object.isRequired,\n  t: PropTypes.func.isRequired,\n};\n\nexport default withTranslation()(Comic);\n","import React, { Component } from 'react';\nimport { PropTypes } from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport Loader from '../../../components/Loader';\nimport Comic from '../components/Comic';\nimport './styles.scss';\n\nclass ComicDetailsView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    const { getComicDetails, t } = this.props;\n    const { match: { params: { id } } } = this.props;\n\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n\n    getComicDetails(id, t);\n  }\n\n  componentWillUnmount() {\n    const { clearReducer } = this.props;\n    clearReducer();\n  }\n\n  renderComic() {\n    const { loadingView, comic } = this.props;\n\n    if (!loadingView && comic.id) {\n      document.title = comic.title;\n\n      return (\n        <Comic comic={comic} />\n      );\n    }\n\n    return null;\n  }\n\n  render() {\n    const { loadingView } = this.props;\n\n    return (\n      <div className=\"comic-view\">\n        <Loader show={loadingView} />\n\n        { this.renderComic() }\n      </div>\n    );\n  }\n}\n\nComicDetailsView.propTypes = {\n  t: PropTypes.func.isRequired,\n  clearReducer: PropTypes.func.isRequired,\n  getComicDetails: PropTypes.func.isRequired,\n  comic: PropTypes.object.isRequired,\n  loadingView: PropTypes.bool.isRequired,\n  match: PropTypes.shape({ params: PropTypes.shape({ id: PropTypes.string }).isRequired }).isRequired,\n};\n\nexport default withTranslation()(ComicDetailsView);\n","import { connect } from 'react-redux';\nimport ComicDetailsView from './ComicDetailsView';\nimport { clearReducer, sagaComicDetails } from '../actions';\n\nconst ComicDetailsContainer = ComicDetailsView;\n\nconst mapStateToProps = (state) => ({\n  comic: state.comicDetailsReducer.comic,\n  loadingView: state.comicDetailsReducer.loadingView,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  clearReducer: () => dispatch(clearReducer()),\n  getComicDetails: (id, t) => dispatch(sagaComicDetails(id, t)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ComicDetailsContainer);\n"],"sourceRoot":""}