{"version":3,"sources":["components/Card/index.js","components/EmptySearch/index.js","components/Button/index.js","components/Pagination/index.js","containers/comic-list/containers/ComicListView.js","containers/comic-list/containers/ComicListContainer.js"],"names":["cretorTypes","getThumbnailUri","thumbnail","path","extension","renderCreators","creators","returned","className","filter","creator","role","map","item","name","getCreatorsName","items","join","Card","comic","id","title","comicLink","data-testid","to","src","alt","withTranslation","t","Button","label","onClick","btnType","disable","disabled","type","getClasses","defaultProps","totalResults","totalPages","currentPage","history","changePage","page","location","params","convertUriParamsToObject","search","push","pathname","convertObjectToUriParams","renderButtonPagination","key","ButtonIcon","icon","size","buttons","amountPages","i","renderButtonsPagination","ComicListView","props","state","nextProps","this","isSearchChanged","getComics","document","clearReducer","nextSearch","currentSearch","getParamUrl","getComicList","querySearch","window","scrollTo","top","behavior","comics","parseInt","getCurrentPage","length","loadingView","Loader","show","renderEmptySearch","renderCards","renderPagination","Component","ComicListContainer","connect","comicListReducer","dispatch","sagaComicList"],"mappings":"gUAKMA,G,OAA0B,YAA1BA,EAA8C,SAE9CC,EAAkB,SAACC,GAAD,gBAAkBA,EAAUC,KAA5B,YAAoCD,EAAUE,YAQhEC,EAAiB,SAACC,GAAD,OAAeA,GAAYA,EAASC,SACzD,wBAAIC,UAAU,YAPQ,SAACF,GAAD,OACtBA,EACGG,QAAO,SAACC,GAAD,OAAaA,EAAQC,OAASX,GAAwBU,EAAQC,OAASX,KAC9EY,KAAI,SAACC,GAAD,OAAUA,EAAKC,QAKlBC,CAAgBT,EAASU,OAAOC,KAAK,OAEvC,MAoCWC,EAlCF,SAAC,GAAmD,IAAD,IAAhDC,MAASC,EAAuC,EAAvCA,GAAIC,EAAmC,EAAnCA,MAAOnB,EAA4B,EAA5BA,UAAWI,EAAiB,EAAjBA,SACvCgB,EAAS,kBAAcF,GAE7B,OACE,yBAAKZ,UAAU,iBAAiBe,cAAY,kBAC1C,kBAAC,IAAD,CAAMA,cAAY,eAAeC,GAAIF,EAAWd,UAAU,WACxD,yBAAKA,UAAU,YAAYiB,IAAKxB,EAAgBC,GAAYwB,IAAKL,KAGnE,yBAAKb,UAAU,cACb,kBAAC,IAAD,CAAMe,cAAY,aAAaC,GAAIF,GACjC,wBAAId,UAAU,SACVa,IAIJhB,EAAeC,M,gBCdVqB,G,OAAAA,eAlBK,SAAC,GAAD,IAAGC,EAAH,EAAGA,EAAH,OAClB,yBAAKL,cAAY,yBAAyBf,UAAU,0BAClD,yBAAKA,UAAU,gBACb,0BAAMA,UAAU,WACboB,EAAE,0CAGL,wBAAIpB,UAAU,QACZ,4BACGoB,EAAE,0CCTPC,G,cAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,QAASC,EAAnB,EAAmBA,QAASxB,EAA5B,EAA4BA,UAAWyB,EAAvC,EAAuCA,QAAvC,OACb,4BACEV,cAAY,mBACZW,SAAUD,EACVE,KAAK,SACL3B,UAAW4B,YAAW,CAAC,gBAAiBJ,EAASxB,IACjDuB,QAASA,GAEPD,KAeND,EAAOQ,aAAe,CACpB7B,UAAW,GACXwB,QAAS,cACTC,SAAS,EACTF,QAAS,cAGIF,Q,QC8EAF,iBAxGI,SAAC,GAA2D,IAAzDC,EAAwD,EAAxDA,EAAGU,EAAqD,EAArDA,aAAcC,EAAuC,EAAvCA,WAAYC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,QACxDC,EAAa,SAACC,GAAU,IACpBC,EAAaH,EAAbG,SACFC,EAASC,YAAyBF,EAASG,QACjDF,EAAOF,KAAOA,EAEdF,EAAQO,KAAR,UAAgBJ,EAASK,UAAzB,OAAoCC,YAAyBL,MAGzDM,EAAyB,SAACR,GAAD,OAC7B,kBAAC,EAAD,CACES,IAAG,yBAAoBT,GACvBZ,QAAS,kBAAMW,EAAWC,IAC1BnC,UAAS,yBAAoBgC,IAAgBG,EAAO,aAAe,IACnEb,MAAOa,KAmDX,OACE,yBAAKnC,UAAU,wBACb,0BAAMA,UAAU,iBACboB,EAAE,iBADL,KAC0BU,GAG1B,yBAAK9B,UAAU,mBACb,kBAAC6C,EAAA,EAAD,CACEtB,QAAS,kBAAMW,EAAWF,EAAc,IACxChC,UAAU,iBACV8C,KAAK,eACLC,KAAK,OACLrB,SAA0B,IAAhBM,IA3Dc,WAC9B,IAAMgB,EAAU,GACZC,EAAc,EAGbjB,EAFqB,EAEc,IACtCgB,EAAQR,KAAKG,EAAuB,IAEpCK,EAAQR,KACN,kBAAC,EAAD,CACEI,IAAI,cACJtB,MAAM,MACNI,UAAQ,EACR1B,UAAU,eAKhB,IAAK,IAAIkD,EAAKlB,EAAc,EAAIkB,EAAIlB,EAAakB,IAC3CA,EAAI,IACND,GAAe,EACfD,EAAQR,KAAKG,EAAuBO,KAIxC,IAAK,IAAIA,EAAIlB,EAAakB,EAAKlB,EAAciB,EAAcC,IACrDA,GAAKnB,GACPiB,EAAQR,KAAKG,EAAuBO,IAiBxC,OAbKlB,EAAciB,EAAelB,IAChCiB,EAAQR,KACN,kBAAC,EAAD,CACEI,IAAI,WACJtB,MAAM,MACNI,UAAQ,EACR1B,UAAU,cAIdgD,EAAQR,KAAKG,EAAuBZ,KAG/BiB,EAkBDG,GAEF,kBAACN,EAAA,EAAD,CACEtB,QAAS,kBAAMW,EAAWF,EAAc,IACxChC,UAAU,iBACV8C,KAAK,gBACLC,KAAK,OACLrB,SAAUM,IAAgBD,KAI9B,yBAAK/B,UAAU,kBC1FfoD,G,yDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAFI,E,+DAKAC,GACbC,KAAKC,gBAAgBF,IACvBC,KAAKE,c,0CAIY,IACXtC,EAAMoC,KAAKH,MAAXjC,EACRuC,SAAS9C,MAAQO,EAAE,UAEnBoC,KAAKE,c,8CAKLE,EADyBJ,KAAKH,MAAtBO,kB,sCAIML,GAAY,IAClBnB,EAAaoB,KAAKH,MAAlBjB,SAEFyB,EAAavB,YAAyBiB,EAAUnB,SAASG,QACzDuB,EAAgBxB,YAAyBF,EAASG,QAExD,OAAOuB,EAAcvB,SAAWsB,EAAWtB,QAAUuB,EAAc3B,OAAS0B,EAAW1B,O,uCAGvE,IACRC,EAAaoB,KAAKH,MAAlBjB,SACR,OAAO2B,YAAY,OAAQ3B,K,kCAGhB,IAAD,EAC4BoB,KAAKH,MAAnCW,EADE,EACFA,aAAc5C,EADZ,EACYA,EAAGgB,EADf,EACeA,SACnB6B,EAAc3B,YAAyBF,EAASG,QAEtDyB,EAAaC,EAAY1B,OAAQ0B,EAAY9B,KAAMf,GAEnD8C,OAAOC,SAAS,CAAEC,IAAK,EAAGC,SAAU,a,oCAMpC,OAFmBb,KAAKH,MAAhBiB,OAEMlE,KAAI,SAACO,GAAD,OAAW,kBAAC,EAAD,CAAMiC,IAAKjC,EAAMC,GAAID,MAAOA,S,yCAGvC,IAAD,EACqC6C,KAAKH,MAAnDiB,EADS,EACTA,OAAQvC,EADC,EACDA,WAAYD,EADX,EACWA,aAAcG,EADzB,EACyBA,QACpCD,EAAcuC,SAASf,KAAKgB,iBAAkB,KAAO,EAE3D,OAAIF,EAAOG,OACF,kBAAC,EAAD,CAAY1C,WAAYA,EAAYD,aAAcA,EAAcE,YAAaA,EAAaC,QAASA,IAGrG,O,0CAGY,IAAD,EACcuB,KAAKH,MAA7BiB,EADU,EACVA,OAER,OAHkB,EACFI,aAEKJ,EAAOG,OAIrB,KAHE,kBAAC,EAAD,Q,+BAMD,IAAD,EACyBjB,KAAKH,MAA7BqB,EADD,EACCA,YAAaJ,EADd,EACcA,OAErB,OACE,yBAAKtE,UAAU,mBAEb,yBAAKA,UAAU,aACb,kBAAC2E,EAAA,EAAD,CAAQC,KAAMF,EAAa1E,UAAWsE,EAAOG,OAAS,kBAAoB,KAExEjB,KAAKqB,oBAELrB,KAAKsB,cAELtB,KAAKuB,yB,GAvFWC,cA0Gb7D,gBAAkBiC,G,QChH3B6B,EAAqB7B,EAcZ8B,uBAZS,SAAC5B,GAAD,MAAY,CAClCgB,OAAQhB,EAAM6B,iBAAiBb,OAC/BxC,aAAcwB,EAAM6B,iBAAiBrD,aACrCC,WAAYuB,EAAM6B,iBAAiBpD,WACnC2C,YAAapB,EAAM6B,iBAAiBT,gBAGX,SAACU,GAAD,MAAe,CACxCxB,aAAc,kBAAMwB,EAASxB,gBAC7BI,aAAc,SAACzB,EAAQJ,EAAMf,GAAf,OAAqBgE,EAASC,YAAc9C,EAAQJ,EAAMf,QAG3D8D,CAA6CD","file":"static/js/3.76e8f6b1.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport './styles.scss';\n\nconst cretorTypes = { penciler: 'penciler', writer: 'writer' };\n\nconst getThumbnailUri = (thumbnail) => `${thumbnail.path}.${thumbnail.extension}`;\n\nconst getCreatorsName = (creators) => (\n  creators\n    .filter((creator) => creator.role === cretorTypes.penciler || creator.role === cretorTypes.writer)\n    .map((item) => item.name)\n);\n\nconst renderCreators = (creators) => (creators && creators.returned ? (\n  <h3 className=\"creators\">\n    { getCreatorsName(creators.items).join(', ') }\n  </h3>\n) : null);\n\nconst Card = ({ comic: { id, title, thumbnail, creators } }) => {\n  const comicLink = `/comics/${id}`;\n\n  return (\n    <div className=\"card-component\" data-testid=\"card-component\">\n      <Link data-testid=\"link-picture\" to={comicLink} className=\"picture\">\n        <img className=\"thumbnail\" src={getThumbnailUri(thumbnail)} alt={title} />\n      </Link>\n\n      <div className=\"comic-info\">\n        <Link data-testid=\"link-title\" to={comicLink}>\n          <h2 className=\"title\">\n            { title }\n          </h2>\n        </Link>\n\n        { renderCreators(creators) }\n      </div>\n    </div>\n  );\n};\n\nCard.propTypes = {\n  comic: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    thumbnail: PropTypes.shape({\n      path: PropTypes.string.isRequired,\n      extension: PropTypes.string.isRequired,\n    }).isRequired,\n    creators: PropTypes.shape({ items: PropTypes.array.isRequired }).isRequired,\n  }).isRequired,\n};\n\nexport default Card;\n","import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport './styles.scss';\nimport { withTranslation } from 'react-i18next';\n\nconst EmptySearch = ({ t }) => (\n  <div data-testid=\"empty-search-component\" className=\"empty-search-component\">\n    <div className=\"wrap-message\">\n      <span className=\"message\">\n        {t('No results found matching your search')}\n      </span>\n\n      <ul className=\"tips\">\n        <li>\n          {t('Check the spelling of the word')}\n        </li>\n      </ul>\n    </div>\n  </div>\n);\n\nEmptySearch.propTypes = { t: PropTypes.func.isRequired };\n\nexport default withTranslation()(EmptySearch);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getClasses } from '../../lib/utils';\nimport './styles.scss';\n\nconst Button = ({ label, onClick, btnType, className, disable }) => (\n  <button\n    data-testid=\"button-component\"\n    disabled={disable}\n    type=\"button\"\n    className={getClasses(['btn-component', btnType, className])}\n    onClick={onClick}\n  >\n    { label }\n  </button>\n);\n\nButton.propTypes = {\n  label: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]).isRequired,\n  onClick: PropTypes.func,\n  className: PropTypes.string,\n  btnType: PropTypes.string,\n  disable: PropTypes.bool,\n};\n\nButton.defaultProps = {\n  className: '',\n  btnType: 'btn-primary',\n  disable: false,\n  onClick: () => {},\n};\n\nexport default Button;\n","/* eslint-disable no-plusplus */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport './styles.scss';\nimport Button from '../Button/index';\nimport ButtonIcon from '../ButtonIcon/index';\nimport { convertUriParamsToObject, convertObjectToUriParams } from '../../lib/utils';\n\nconst Pagination = ({ t, totalResults, totalPages, currentPage, history }) => {\n  const changePage = (page) => {\n    const { location } = history;\n    const params = convertUriParamsToObject(location.search);\n    params.page = page;\n\n    history.push(`${location.pathname}${convertObjectToUriParams(params)}`);\n  };\n\n  const renderButtonPagination = (page) => (\n    <Button\n      key={`btn-pagination-${page}`}\n      onClick={() => changePage(page)}\n      className={`btn-pagination ${currentPage === page ? 'btn-active' : ''}`}\n      label={page}\n    />\n  );\n\n  const renderButtonsPagination = () => {\n    const buttons = [];\n    let amountPages = 5;\n    const numPageDotPrevius = 3;\n\n    if ((currentPage - numPageDotPrevius) > 0) {\n      buttons.push(renderButtonPagination(1));\n\n      buttons.push((\n        <Button\n          key=\"btn-previus\"\n          label=\"...\"\n          disabled\n          className=\"btn-dots\"\n        />\n      ));\n    }\n\n    for (let i = (currentPage - 2); i < currentPage; i++) {\n      if (i > 0) {\n        amountPages -= 1;\n        buttons.push(renderButtonPagination(i));\n      }\n    }\n\n    for (let i = currentPage; i < (currentPage + amountPages); i++) {\n      if (i <= totalPages) {\n        buttons.push(renderButtonPagination(i));\n      }\n    }\n\n    if ((currentPage + amountPages) < totalPages) {\n      buttons.push((\n        <Button\n          key=\"btn-next\"\n          label=\"...\"\n          disabled\n          className=\"btn-dots\"\n        />\n      ));\n\n      buttons.push(renderButtonPagination(totalPages));\n    }\n\n    return buttons;\n  };\n\n  return (\n    <div className=\"pagination-component\">\n      <span className=\"total-results\">\n        {t('Total results')}: { totalResults }\n      </span>\n\n      <div className=\"wrap-pagination\">\n        <ButtonIcon\n          onClick={() => changePage(currentPage - 1)}\n          className=\"btn-pagination\"\n          icon=\"chevron-left\"\n          size=\"20px\"\n          disabled={currentPage === 1}\n        />\n\n        { renderButtonsPagination() }\n\n        <ButtonIcon\n          onClick={() => changePage(currentPage + 1)}\n          className=\"btn-pagination\"\n          icon=\"chevron-right\"\n          size=\"20px\"\n          disabled={currentPage === totalPages}\n        />\n      </div>\n\n      <div className=\"empty-col\" />\n    </div>\n  );\n};\n\nPagination.propTypes = {\n  history: PropTypes.object.isRequired,\n  totalResults: PropTypes.number.isRequired,\n  totalPages: PropTypes.number.isRequired,\n  currentPage: PropTypes.number.isRequired,\n  t: PropTypes.func.isRequired,\n};\n\nexport default withTranslation()(Pagination);\n","import React, { Component } from 'react';\nimport { PropTypes } from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport Card from '../../../components/Card/index';\nimport { getParamUrl, convertUriParamsToObject } from '../../../lib/utils';\nimport Loader from '../../../components/Loader/index';\nimport EmptySearch from '../../../components/EmptySearch';\nimport Pagination from '../../../components/Pagination';\nimport './styles.scss';\n\nclass ComicListView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidUpdate(nextProps) {\n    if (this.isSearchChanged(nextProps)) {\n      this.getComics();\n    }\n  }\n\n  componentDidMount() {\n    const { t } = this.props;\n    document.title = t('Marvel');\n\n    this.getComics();\n  }\n\n  componentWillUnmount() {\n    const { clearReducer } = this.props;\n    clearReducer();\n  }\n\n  isSearchChanged(nextProps) {\n    const { location } = this.props;\n\n    const nextSearch = convertUriParamsToObject(nextProps.location.search);\n    const currentSearch = convertUriParamsToObject(location.search);\n\n    return currentSearch.search !== nextSearch.search || currentSearch.page !== nextSearch.page;\n  }\n\n  getCurrentPage() {\n    const { location } = this.props;\n    return getParamUrl('page', location);\n  }\n\n  getComics() {\n    const { getComicList, t, location } = this.props;\n    const querySearch = convertUriParamsToObject(location.search);\n\n    getComicList(querySearch.search, querySearch.page, t);\n\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  }\n\n  renderCards() {\n    const { comics } = this.props;\n\n    return comics.map((comic) => <Card key={comic.id} comic={comic} />);\n  }\n\n  renderPagination() {\n    const { comics, totalPages, totalResults, history } = this.props;\n    const currentPage = parseInt(this.getCurrentPage(), 10) || 1;\n\n    if (comics.length) {\n      return <Pagination totalPages={totalPages} totalResults={totalResults} currentPage={currentPage} history={history} />;\n    }\n\n    return null;\n  }\n\n  renderEmptySearch() {\n    const { comics, loadingView } = this.props;\n\n    if (!loadingView && !comics.length) {\n      return <EmptySearch />;\n    }\n\n    return null;\n  }\n\n  render() {\n    const { loadingView, comics } = this.props;\n\n    return (\n      <div className=\"comic-list-view\">\n\n        <div className=\"wrap-list\">\n          <Loader show={loadingView} className={comics.length ? 'loader-absolute' : ''} />\n\n          { this.renderEmptySearch() }\n\n          { this.renderCards() }\n\n          { this.renderPagination() }\n        </div>\n      </div>\n    );\n  }\n}\n\nComicListView.propTypes = {\n  clearReducer: PropTypes.func.isRequired,\n  getComicList: PropTypes.func.isRequired,\n  comics: PropTypes.array.isRequired,\n  loadingView: PropTypes.bool.isRequired,\n  location: PropTypes.object.isRequired,\n  t: PropTypes.func.isRequired,\n  totalResults: PropTypes.number.isRequired,\n  totalPages: PropTypes.number.isRequired,\n  history: PropTypes.object.isRequired,\n};\n\nexport default withTranslation()(ComicListView);\n","import { connect } from 'react-redux';\nimport ComicListView from './ComicListView';\nimport { clearReducer, sagaComicList } from '../actions';\n\nconst ComicListContainer = ComicListView;\n\nconst mapStateToProps = (state) => ({\n  comics: state.comicListReducer.comics,\n  totalResults: state.comicListReducer.totalResults,\n  totalPages: state.comicListReducer.totalPages,\n  loadingView: state.comicListReducer.loadingView,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  clearReducer: () => dispatch(clearReducer()),\n  getComicList: (search, page, t) => dispatch(sagaComicList(search, page, t)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ComicListContainer);\n"],"sourceRoot":""}